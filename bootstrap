#! /usr/bin/env nix-shell
#! nix-shell -i bash --package wget --package curl --package git
# bootstrap
# An executable to bootstrap my setup, configuration, dotfiles, etc. on a
# fresh NixOS host.
#
# This executable is not responsible for installing all of my configuration
# itself. It does the minimal amount of work required to get git up and
# running so that my private configuration repositories can be cloned down
# from GitHub and their own installers can be invoked.
#
# This executable is publically accessible on the internet and can be
# downloaded and run with the following commands.
#
# 	wget -O bootstrap https://tinyurl.com/benjaminedwardwebb export
# 	BOOTSTRAP_GITHUB_TOKEN="<token>"
# 	bash bootstrap
#
# The tiny url simply forwards to GitHub's raw content url. Thus this
# executable can be obtained by running the following as well.
#
# 	curl https://raw.githubusercontent.com/benjaminedwardwebb/benjaminedwardwebb/main/bootstrap > bootstrap
#
# This bootstrap generates a new SSH key and adds it to my GitHub account.
# This allows it to clone my private repositories. Be aware of this key
# management step. This bootstrap does not do any other key or secret
# management beyond that. Seeding a new host with additional secret data
# (e.g., gpg key, passwords) is a step reserved for later in the host
# initialization process, and it always requires some manual intervention.
#
# The only reason this bootstrap executable is not in the same repository as
# the other installers is that those repositories are private, meaning this
# script would not be downloadable from the web. If those other repositories
# are made public, this script should be moved there.
main() {
	bootstrap::instructions || return 1

	echo "Bootstrapping configuration ..."
	echo ""

	# Bootstrapping requires starting in the user's home directory. 
	cd ~

	bootstrap::setup_ssh_key || return 1
	bootstrap::install_backpack || return 1
	return 0
}

bootstrap::instructions() {
	echo "Hello! ðŸ‘‹"
	echo ""
	echo "This executable bootstraps benjaminedwardwebb's configuration"
	echo "on a new host running NixOS."
	echo ""
	echo "It requires the following:"
	echo ""
	echo "  - at least 50 gigabytes (GB) of available disk space"
	echo "  - exported environment variable BOOTSTRAP_GITHUB_TOKEN"
	echo "  - sudo"
	echo ""
	echo "Checking that these requirements are met ..."
	echo ""

	# Get the number of available bytes on the device of the current working
	# directory in human-readable format, take the last row of the output
	# (excluding the first row, which is a header), and drop the last two
	# characters which is the byte unit (e.g., K, M, or G) and a space.
	#
	# The output of the first command in the pipeline should look like
	#
	# 	Avail
	# 	 250G 
	#
	# and the final output of the pipeline captured by the variable should
	# look like
	#
	# 	 250
	#
	# Formatting it as a simple number allows it to be used in bash's
	# arithmetic mode.
	local available_gigabytes=$(
		df --human --output=avail . \
			| tail -n 1 \
			| head -c -2
	) || return 1

	if (( $available_gigabytes < 50 )); then
		echo "  â˜’ at least 50 GB of available disk space"
		echo ""
		echo "This host has less than 50 gigabytes of available disk space on"
		echo "the current device. This might be because it is a virtual"
		echo "machine (VM), which often start with a small amount of disk"
		echo "space."
		echo ""
		echo "Consider the following command and its output."
		echo ""
		echo "    df --human --output=avail . | tail -n 1"
		printf "    " && df --human --output=avail . | tail -n 1
		echo ""
		echo "If you need to resize the current partition, run"
		echo ""
		echo "    wget -O resize https://tinyurl.com/benjaminedwardwebb-resize"
		echo "    bash resize"
		echo ""
		echo "and follow the resize executable's instructions to resize the"
		echo "partition."
		return 1
	else
		echo "  â˜‘ at least 50 GB of available disk space"
	fi

	if [ "${BOOTSTRAP_GITHUB_TOKEN:-unset}" = "unset" ]; then
		echo "  â˜’ exported environment variable BOOTSTRAP_GITHUB_TOKEN"
		echo ""
		echo "The environment variable BOOTSTRAP_GITHUB_TOKEN is unset."
		echo "Check an existing host to find the value of this token"
		echo "in something like pass, and then set this environment variable"
		echo "with"
		echo ""
		echo "    export BOOTSTRAP_GITHUB_TOKEN=<token>"
		echo ""
		return 1
	else
		echo "  â˜‘ exported environment variable BOOTSTRAP_GITHUB_TOKEN"
	fi

	if ! sudo -n true > /dev/null 2>&1; then
		echo "  â˜’ sudo"
		echo ""
		echo "It appears the current shell has not run sudo yet. Let's try it"
		echo "now. Running"
		echo ""
		echo "    sudo true"
		echo ""
		sudo true
		if sudo -n true > /dev/null 2>&1; then
			echo ""
			echo "  â˜‘ sudo"
			echo ""
		else
			return 1
		fi
	else
		echo "  â˜‘ sudo"
		echo ""
	fi

	echo "All requirements are met! ðŸ¥³"
	echo ""
	read -p "Continue? [Enter]"
	echo ""
	return 0
}

bootstrap::setup_ssh_key() {
	local -r github_token="$BOOTSTRAP_GITHUB_TOKEN"

	# Since most of my setup and configuration is still in a private repository on
	# GitHub, I have to authenticate before I can access it. The following steps
	# generate an SSH key pair and then automatically adds it to my GitHub
	# account. Note that an SSH key is required for fetching git repositories via
	# SSH whether they are public or private, however the ability of the key to
	# identify you also provides access to private repositories for the account the
	# key is added to.
	local -r ssh_key_path="$HOME/.ssh/id_rsa"

	if ! test -e $ssh_key_path; then
		ssh-keygen -f "$ssh_key_path" -N '' || return 1
	else
		echo "	An SSH key already exists at $ssh_key_path, skipping key"
		echo "	generation."
		echo ""
	fi

	local -r public_ssh_key="$(cat ${ssh_key_path}.pub)" || return 1
	local -r hostname="$(hostname)" || return 1

	echo "	Adding the public SSH key at ${ssh_key_path}.pub to your"
	echo "	GitHub account."
	echo ""
	bootstrap::add_ssh_key_to_github "$github_token" "$hostname" "$public_ssh_key" || return 1
	echo ""

	return 0
}

bootstrap::add_ssh_key_to_github() {
	local -r github_token="$1"
	local -r hostname="$2"
	local -r public_ssh_key="$3"

 	# This curl call:
 	#
 	#   - suppresses progress metadata output
 	#   - suppresses the response body output
 	#   - fails on most status codes >= 400 (but not all, such as 401 or 407)
 	#   - outputs the HTTP status code
 	#
	# See: https://docs.github.com/en/rest/users/keys#create-a-public-ssh-key-for-the-authenticated-user
	local -r status_code=$(
		curl \
			--silent \
			-o /dev/null \
			--fail-with-body \
			--write-out "%{http_code}" \
			-X POST \
			-H "Accept: application/vnd.github.v3+json" \
			-H "Authorization: token $github_token" \
			--data "{ \"title\": \"${hostname}\", \"key\": \"${public_ssh_key}\" }" \
			https://api.github.com/user/keys \
			|| return 1
	)

	if (( $status_code > 399 )); then
		echo "	Received HTTP status code $status_code while adding SSH key to"
		echo "	GitHub."
		echo ""
		echo "Encountered an ERROR."
		return 1
	fi

	return 0
}

bootstrap::install_backpack() {
	if ! test -d "$HOME/backpack/.git"; then
		git clone git@github.com:benjaminedwardwebb/backpack || return 1
	else
		echo "	Git repository at $HOME/backpack appears to"
		echo "	already exist. Skipping git clone."	
		echo ""
	fi

	pushd backpack > /dev/null 2>&1 || return 1
	./install || return 1
	popd > /dev/null 2>&1 || return 1

	return 0
}

main $@ || exit 1

# Reboot the computer for new settings to take full effect.
echo ""
read -p "Bootstrap complete. Reboot? [Enter]"

reboot
